nextflow_process {

    name "Test Process SEQKIT_SAMPLE"
    script "../main.nf"
    process "SEQKIT_SAMPLE"
    config './nextflow.config'

    tag "modules"
    tag "modules_nfcore"
    tag "seqkit"
    tag "seqkit/sample"

    test("sarscov2-genome_fasta") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test', assembler:'megahit' ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
            )
        }
    }

    test("sarscov2-genome_fasta_gz") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test', assembler:'megahit'  ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.gz', checkIfExists: true)
                ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
            )
        }
    }

    test("sarscov2-fastq pe") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
            )
        }
    }

    test("sarscov2-test_1_fastq_gz se") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
            )
        }
    }

    test("sarscov2-genome_fasta-stub") {
        options '-stub'
        when {
            process {
                """
                input[0] = [
                    [ id:'test', assembler:'megahit'  ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
            )
        }
    }

    test("sarscov2-fastq pe - stub") {
        options "-stub"
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
            )
        }
    }
}
